server:
  port: ${APPLICATION_PORT:8080}
spring:
  sql:
    init:
      data-locations: #classpath:data.sql #Locations of the data (DML) scripts to apply to the database.
      mode: always # initialize an SQL database
  messages:
    basename: i18n.messages
    fallback-to-system-locale: false
  datasource:
#    url: ${DATASOURCE_URL:jdbc:postgresql://car-part-db-container:5430/CarPartDB_Docker}
#    url: ${DATASOURCE_URL:jdbc:postgresql://localhost:5430/postgres}
#    password: ${DATASOURCE_PASSWORD:cp_usr}
#    username: ${DATASOURCE_USER:cp_PostgreSQL}
    url: jdbc:postgresql://PostgreSQL-Container:5430/CarPartDB_Docker_Container # Указано имя контейнера, что бы приложение в Docker-е смогло достучаться к БД. Потому что они запустятся в рамках одного docker-compose и будут знать друг о друге. Это нужно, чтобы у нас была одна закрытая инфраструктура для проекта.
    username: cp_usr
    password: cp_PostgreSQL
    schema: classpath:schema.sql # todo Закоментарить после создания Docker-Image и упаковки приложения в контейнер
    driver-class-name: org.postgresql.Driver
  jpa:
    show-sql: false
    generate-ddl: false
    hibernate:
      ddl-auto: none #отключаем автоматическое создание схемы Hibernate
    properties:
      hibernate:
        format_sql: false
logging:
  level:
    ROOT: ERROR
    com:
      querydsl:
        sql: DEBUG #is for logging statements in querydsl
  pattern:
    console: KAPOROV-Docker-App %d{dd-MM-yyyy HH:mm:ss} %magenta([%thread]) %highlight(%-5level) %logger.%M - %msg%n