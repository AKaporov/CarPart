version: "2.0"

services:
  PostgreSQL-Container:
    container_name: "CarPart-PostgreSQL-Container"
    image: postgres:12.3-alpine
    restart: always
    working_dir: /car-part-db
    mem_limit: 1536MB
    mem_reservation: 1G
    ports:
      - "5430:5432"
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_DOCKER}
      POSTGRES_USER: ${POSTGRES_USER_DOCKER}
      POSTGRES_DB: ${POSTGRES_DB_DOCKER}
      PG-DATA: "/var/lib/postgresql/data/pgdata"
    volumes:
#      - ./1. Init Database:/docker-entrypoint-initdb.d
      - CarPart-DB-Data:/var/lib/postgresql/data
    networks:
      - car-part-networks
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER_DOCKER} -d ${POSTGRES_DB_DOCKER}"]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 10s


  PgAdmin-Container:
    container_name: "CarPart-PgAdmin-Container"
    image: dpage/pgadmin4:6.20
    restart: unless-stopped
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: "cp@hwdemo.com"
      PGADMIN_DEFAULT_PASSWORD: "cp_PgAdmin"
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - CarPart-PgAdmin-Data:/var/lib/pgadmin
    networks:
      - car-part-networks
    depends_on:
      - PostgreSQL-Container


# Упаковываем приложение в контейнер
  command-line-runner-docker-container:
    container_name: "CommandLineRunner-Docker-Container"
    image: command-line-runner-docker-application:1.0.0
    environment:
      APPLICATION_PORT_DOCKER: 9090
      APPLICATION_DATASOURCE_URL_DOCKER: jdbc:postgresql://CarPart-PostgreSQL-Container:5432/${POSTGRES_DB_DOCKER}
      APPLICATION_DATASOURCE_PASSWORD_DOCKER: ${POSTGRES_PASSWORD_DOCKER}
      APPLICATION_DATASOURCE_USER_DOCKER: ${POSTGRES_USER_DOCKER}
      SPRING_PROFILES_ACTIVE: docker-cmp
#    environment:
#      - "APPLICATION_PORT_DOCKER=9090"
#      - "APPLICATION_DATASOURCE_URL_DOCKER=jdbc:postgresql://CarPart-PostgreSQL-Container:5432/CarPartDB_Docker"
#      - "APPLICATION_DATASOURCE_PASSWORD_DOCKER=cp_PostgreSQL"
#      - "APPLICATION_DATASOURCE_USER_DOCKER=cp_usr"
##      - "SPRING_PROFILES_ACTIVE=docker-cmp"
#    Говорим что его надо будет собрать - в качестве контекста
#    передаем текущую директорию - в ней лежит Dockerfile
    build:
      context: .
      dockerfile: Dockerfile
#    Монтируем локальную директорию ./src в директорию внутри контейнера /app
    volumes:
      - ./src:/app
#    Говорим пробросить порт 8082 хоста в порт 9090 контейнера
    ports:
      - "8082:9090"
    networks:
      - car-part-networks
    depends_on:
      - PostgreSQL-Container

volumes:
  CarPart-DB-Data:
  CarPart-PgAdmin-Data:

networks:
  car-part-networks:
    driver: bridge